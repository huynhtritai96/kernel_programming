## Summary of Setup and Execution Steps

### Overview

This guide walks through setting up a virtualized environment using QEMU to run a Linux kernel on a RISC-V architecture, leveraging U-Boot as the bootloader and Buildroot for toolchain generation. The tutorial covers installation of prerequisites, compilation, and execution steps for each component.

---

## Page 1: Introduction to Components
---
### Key Components
- **QEMU:** Emulator for creating virtual RISC-V hardware environments.
- **U-Boot:** Bootloader that initializes the virtual hardware and loads the Linux kernel.
- **RISC-V:** Target architecture for QEMU and the software stack.
- **Linux Kernel:** OS that runs on the virtualized RISC-V hardware.
- **Buildroot:** Tool for building cross-compilation toolchains and Linux system images.
- **OpenSBI:** Provides an interface between the Linux OS and RISC-V hardware for low-level tasks.

### Flow of Execution
1. **QEMU** emulates the RISC-V hardware environment.
2. **U-Boot** initializes the hardware and loads the Linux kernel.
3. **Buildroot** creates the toolchain and system image.
4. **OpenSBI** interfaces with RISC-V hardware, managing low-level operations.


### Flow of Execution
1. **Buildroot**: Cross-compiling toolchain.
2. **OpenSBI**: Firmware/first-stage bootloader.
3. **U-Boo**: Bootloader.
4. **Linux**: Kernel.
5. **BusyBox**: Root filesystem and utilities. contain Linux command

---
---
## Page 2: Setup on Ubuntu 20.04
---
### Install Prerequisites

```bash
sudo apt update && sudo apt install build-essential libncurses-dev rsync git ninja-build libglib2.0-dev libpixman-1-dev bison flex libssl-dev wget unzip bc file
```

### Directory Preparation

```bash
mkdir tech.io && cd tech.io
```

### Install Toolchain with Buildroot

```bash
wget https://buildroot.org/downloads/buildroot-2023.08.tar.gz
tar -xf buildroot-2023.08.tar.gz
cd buildroot-2023.08
make menuconfig
```

#### Configuration in Menuconfig:
**Select the following options:**
- **Target options**:
  - Target Architecture > **RISCV**
  - Target Architecture Size > **64-bit**
- **Toolchain**:
  - C library > **musl**
  - Kernel Headers > **Linux 6.4.x kernel headers**
  - Binutils Version > **binutils 2.41**
  - GCC compiler Version > **gcc 13.x**
Exit and save the configuration. Build the toolchain:

```bash
make sdk -j$(nproc)
cd ..
mkdir toolchain && cd toolchain
tar -xf ../buildroot-2023.08/output/images/riscv64-buildroot-linux-musl_sdk-buildroot.tar.gz
riscv64-buildroot-linux-musl_sdk-buildroot/relocate-sdk.sh

cd ..
printf "export PATH=~/tech.io/toolchain/riscv64-buildroot-linux-musl_sdk-buildroot/bin:\$PATH\n" > tech.io-env.sh
source tech.io-env.sh
```

### Verify Installation

```bash
riscv64-linux-gcc --version
```

---

## Page 3: Install QEMU
---
### Install via Package Manager (Recommended)

```bash
sudo apt update
sudo apt install qemu-user qemu-system
qemu-system-riscv64 --version
```

### Verify Supported Machines

```bash
qemu-system-riscv64 -M ?
```

---

# Example Day 1: Build Hello World by using
---
```bash
sudo apt install vim
cd /home/htritai/tech.io
vim hello.c
```
```c
// hello.c
#include <stdio.h>

int main() {
    printf("Hello, World!\n");
    return 0;
}
```

```bash
## Build hello.c
riscv64-linux-gcc -o hello hello.c -static
## Run hello
qemu-riscv64 hello
```
---
## Page 4: Install U-Boot
---
### Set Environment Variable

```bash
echo "export CROSS_COMPILE=riscv64-linux-" >> tech.io-env.sh
source tech.io-env.sh
```

### Build U-Boot

```bash
git clone https://source.denx.de/u-boot/u-boot.git
cd u-boot
git checkout v2023.07.02
make qemu-riscv64_smode_defconfig 
make -j$(nproc)
```
- qemu is simulated hardware
- riscv64: archtecture of hardware
- smode: S-Mode
- defconfig:

### Output
- **Binary Location:** `./u-boot.bin`

---

## Page 5: Install OpenSBI
---

### Build OpenSBI

```bash
git clone https://github.com/riscv-software-src/opensbi.git
cd opensbi
git checkout v1.2
make PLATFORM=generic FW_PAYLOAD_PATH=../u-boot/u-boot.bin -j$(nproc)
```

### Output
- **Firmware Location:** `build/platform/generic/firmware/fw_payload.elf`

---

## Page 6: Run U-Boot in QEMU
---
### Create QEMU Run Script

```bash
cd ~/tech.io
echo '#!/usr/bin/bash' > run-u-boot.sh
echo 'qemu-system-riscv64 -smp 2 \' >> run-u-boot.sh
echo '-m 1G \' >> run-u-boot.sh
echo '-nographic \' >> run-u-boot.sh
echo '-machine virt \' >> run-u-boot.sh
echo '-bios ./opensbi/build/platform/generic/firmware/fw_payload.elf' >> run-u-boot.sh
chmod +x run-u-boot.sh
```

### Run QEMU Script

```bash
./run-u-boot.sh
```

### Expected Output

```
U-Boot 2023.07.02 (Sep 28 2023 - 07:11:42 +0100)

CPU:   rv64imafdch_zicsr_zifencei_zihintpause_zba_zbb_zbc_zbs_sstc
Model: riscv-virtio,qemu
DRAM:  1 GiB
Core:  22 devices, 10 uclasses, devicetree: board
Flash: 32 MiB
Loading Environment from nowhere... OK
In:    serial@10000000
Out:   serial@10000000
Err:   serial@10000000
Net:   No ethernet found.
Working FDT set to bf7307d0
Hit any key to stop autoboot:  0

Device 0: unknown device
scanning bus for devices...

Device 0: unknown device
No ethernet found.
No ethernet found.
=>
```

---

## Page 7: Install Linux Kernel
---
### Environment Setup

```bash
echo "export ARCH=riscv" >> tech.io-env.sh
source tech.io-env.sh
```

### Build Linux Kernel

```bash
git clone https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
cd linux
git checkout v6.2
make defconfig
make -j$(nproc)
```

### Verify Build

```bash
grep --color=always -ni 'riscv' .config
ls arch/riscv/boot -lSh
```
If the configuration option `CONFIG_RISCV=y` is present, it indicates that the kernel was configured and built for RISC-V. This happens because the `ARCH` environment variable was set to `riscv` when the `.config` file was generated.
### Output Files

- **Image:** `arch/riscv/boot/Image`
- **Image.gz:** `arch/riscv/boot/Image.gz`

---

## Page 8: Create Disk Image
---
### Install `parted`

```bash
sudo apt-get update
sudo apt-get install -y parted
```

### Create Disk Image

```bash
cd ~/tech.io
dd if=/dev/zero of=disk.img bs=1M count=128
```

### Create Partitions

```bash
sudo parted disk.img mklabel gpt
sudo losetup --find --show --partscan disk.img # Check output: example /dev/loop11
sudo parted --align minimal /dev/loop11 mkpart primary ext4 0 50% # divide area
sudo parted --align minimal /dev/loop11 mkpart primary ext4 50% 100%
sudo mkfs.ext4 /dev/loop11p1 # format to ext4
sudo mkfs.ext4 /dev/loop11p2
sudo parted /dev/loop11 set 1 boot on # set region 1 to boot
```

### Copy Kernel to Disk

```bash
sudo mkdir /mnt/uboot
sudo mount /dev/loop11p1 /mnt/uboot
sudo cp linux/arch/riscv/boot/Image /mnt/uboot
sudo umount /mnt/uboot
# sudo losetup -d /dev/loop11 # maybe not use it
```

---

## Page 9: Modify QEMU Script
---
### Update `run-u-boot.sh`

```bash
#!/usr/bin/bash

qemu-system-riscv64 -smp 2 \
-m 1G \
-nographic \
-machine virt \
-bios ./opensbi/build/platform/generic/firmware/fw_payload.elf \
-blockdev driver=file,filename=./disk.img,node-name=disk \
-device virtio-blk-device,drive=disk
```

### Run QEMU Script

```bash
./run-u-boot.sh
```

### Verify Disk Detection
When the script runs, you should see output similar to the following, indicating that U-Boot has detected the disk:

```
...
Hit any key to stop autoboot:  0

Device 0: QEMU VirtIO Block Device
            Type: Hard Disk
            Capacity: 128.0 MB = 0.1 GB (262144 x 512)
... is now current device
Scanning virtio 0:1...
** File not found ubootefi.var **
Failed to load EFI variables
** Unable to write file ubootefi.var **
Failed to persist EFI variables
BootOrder not defined
EFI boot manager: Cannot load any image
scanning bus for devices...
...
---
```
---
## Page 10: Configure U-Boot for Kernel Boot
---
### Set U-Boot Boot Command

```bash
cd u-boot
make menuconfig
```
Inside ```Boot options```, set:
- **Boot Command:** `ext4load virtio 0:1 84000000 Image; booti 0x84000000 - ${fdtcontroladdr}`
- **Boot Arguments:** `root=/dev/vda2 rootwait console=ttyS0 earlycon=sbi`

### Rebuild U-Boot and OpenSBI

```bash
make -j$(nproc)
cd ../opensbi/
make PLATFORM=generic FW_PAYLOAD_PATH=../u-boot/u-boot.bin -j$(nproc)
cd ..
./run-u-boot.sh
```

### Outcome

- **U-Boot** loads and attempts to boot the Linux kernel from the `disk.img`.

---

## Page 11: Build Root Filesystem with BusyBox
---
### Install BusyBox

```bash
wget https://busybox.net/downloads/busybox-1.33.0.tar.bz2
tar xf busybox-1.33.0.tar.bz2
cd busybox-1.33.0
make allnoconfig
make menuconfig
```

### BusyBox Configuration

  - **Enable Static Binary:**
    - Navigate to `Settings` → `Build Options`.
    - Select `Build static binary (no shared libs)`.

    setup insmod, dmesg với rmmod
    - Load module to Kernel:
      - Enter Linux Module Utillities -> Enable insmod, Enable rmmod
      - Enter Linux System Utilities -> Enable dmesg

  - **Set Cross Compiler Prefix:**
    - Navigate to `Settings` → `Build Options`.
    - Set `Cross compiler prefix` to `riscv64-linux-`.
   - **Enter Shell -> Set ash:**
   - **Enter Init Utilities -> Set Init**
   - **Enter Init Utilities -> Set halt**

   - **Enter Linux System Utilities -> Set mount, disable -> Support -f (fake mount) and Support -v (verbose)**
   - **Enter CoreUtils -> Set cat, echo, mkdir, ls**
   - **Enter Process Utilities -> Set uptime**
   - **Enter Editor -> Set vi**
   - **Enter Networking -> Set httpd (32 kb), Set ifconfig, disable -> Enaable -u <user> option, Enable HTTP authentication, Support reverse proxy, Support GZIP content encoding, Support caching via ETag header.**

### Build and Install BusyBox

```bash
make -j$(nproc)
make install
```

### Copy BusyBox to Root Filesystem

```bash
sudo mkdir /mnt/rootfs
sudo mount /dev/loop11p2 /mnt/rootfs
sudo mkdir /mnt/rootfs/dev /mnt/rootfs/proc /mnt/rootfs/sys
sudo rsync -aH _install/ /mnt/rootfs/
sudo umount /mnt/rootfs
```
NOTE: we create dev, proc, sys
output: after copying bin, sbin, usr folder
``` bash
htritai@ubuntu:~/tech.io/busybox-1.33.0/_install$ tree
.
├── bin
│   ├── ash -> busybox
│   ├── busybox
│   ├── cat -> busybox
│   ├── dmesg -> busybox
│   ├── echo -> busybox
│   ├── ls -> busybox
│   ├── mkdir -> busybox
│   ├── mount -> busybox
│   ├── sh -> busybox
│   └── vi -> busybox
├── sbin
│   ├── halt -> ../bin/busybox
│   ├── ifconfig -> ../bin/busybox
│   ├── init -> ../bin/busybox
│   ├── insmod -> ../bin/busybox
│   └── rmmod -> ../bin/busybox
└── usr
    ├── bin
    │   └── uptime -> ../../bin/busybox
    └── sbin
        └── httpd -> ../../bin/busybox

```

### Run U-Boot and Access BusyBox

```bash
cd ~/tech.io
./run-u-boot.sh
```

- Inside BusyBox, mount proc:

```bash
mount -t proc none /proc
```

---
# Homework 2: run Hello world in QEMU
---
### 1. **Environment Setup**

- **Create Project Directory**:
   ```bash
   mkdir hw2
   cd hw2
   vim hello.c
   ```

### 2. **Writing and Configuring the Kernel Module**

- **Write the Kernel Module Code**:
   ```c
   #include <linux/kernel.h>
   #include <linux/module.h>
   #include <linux/init.h>

   static int __init hello_init(void) {
       printk(KERN_INFO "Hello Qemu!!!\n");
       return 0;
   }

   static void __exit hello_exit(void) {
       printk(KERN_INFO "Goodbye Qemu!!!\n");
   }

   module_init(hello_init);
   module_exit(hello_exit);

   MODULE_LICENSE("GPL");
   MODULE_AUTHOR("Do Uong");
   MODULE_DESCRIPTION("A simple Hello World LKM for RISCV");
   ```
   - **#include <linux/kernel.h>, <linux/module.h>, <linux/init.h>**: These header files include essential definitions and functions to interact with the kernel.
   - **hello_init**: This function is defined to run when the module is **loaded into the kernel**. It uses the `printk` function to log the message "Hello Qemu!!!" to the kernel's message buffer. The `__init` keyword indicates that this function is used only during initialization.
   - **hello_exit**: This function is called when the module is **unloaded from the kernel**. It logs the message "Goodbye Qemu!!!" to the kernel's message buffer. The `__exit` keyword indicates that this function is used only during cleanup.
   - **module_init(hello_init)**: This macro registers `hello_init` as the function to be called when the module is loaded.
   - **module_exit(hello_exit)**: This macro registers `hello_exit` as the function to be called when the module is unloaded.
   - **MODULE_LICENSE, MODULE_AUTHOR, MODULE_DESCRIPTION**: These macros provide metadata about the module, including the license (GPL in this case), the author's name, and a brief description of the module. This information is used by the kernel and other tools to identify and manage the module.

- **Create and Edit the Makefile**:
   ```bash
   vim Makefile
   ```

- **Write the Makefile**:
   ```makefile
   KERNEL_DIR := ~/tech.io/linux
   # ARCH=riscv
   # CROSS_COMPILE=riscv64-linux-

   obj-m += hello.o

   all:
       make -C $(KERNEL_DIR) M=$(PWD) ARCH=$(ARCH) CROSS_COMPILE=$(CROSS_COMPILE) modules

   clean:
       make -C $(KERNEL_DIR) M=$(PWD) ARCH=$(ARCH) CROSS_COMPILE=$(CROSS_COMPILE) clean
   ```
   - **KERNEL_DIR := ~/tech.io/linux**: This variable sets the path to the Linux kernel source directory. The kernel's build system uses this directory to compile the module.
   - **ARCH and CROSS_COMPILE**: These variables are used for cross-compilation, where `ARCH` specifies the architecture (e.g., `riscv`), and `CROSS_COMPILE` specifies the prefix for the cross-compiler. They are commented out here, which means they will use the default values unless uncommented.
   - **obj-m += hello.o**: This line tells the kernel build system that `hello.o` (the compiled object file from `hello.c`) is the target to build.
   - **all**: This target defines the command to compile the module. It uses the `make` command with the `-C` option to specify the kernel directory and `M=$(PWD)` to specify the current working directory. It passes the architecture and cross-compiler options if needed.
   - **clean**: This target cleans up the compiled files. It runs the kernel's `make clean` command to remove any generated files, making the directory ready for a fresh build.

### 3. **Compiling the Kernel Module**
This step involves building the kernel module using the Makefile created in the previous step.

- **Compile the Module**:
   ```bash
   make
   ```
   - **make**: This command reads the Makefile and follows the instructions to compile the `hello.c` file into a kernel module (`hello.ko`). 

### 4. **Preparing the Root Filesystem**
This step sets up the environment in which the kernel module will be run, including mounting the root filesystem and copying necessary files.

- **Mount and Setup Root Filesystem**:
   ```bash
   sudo mkdir /mnt/rootfs
   sudo mount /dev/loop11p2 /mnt/rootfs
   cp ~/tech.io/hw2/hello.ko /mnt/rootfs
   sudo mkdir /mnt/rootfs/dev /mnt/rootfs/proc /mnt/rootfs/sys
   sudo rsync -aH ~/tech.io/busybox-1.33.0/_install/ /mnt/rootfs/
   sudo umount /mnt/rootfs
   ```
   - **sudo mkdir /mnt/rootfs**: Creates a directory where the root filesystem will be temporarily mounted.
   - **sudo mount /dev/loop11p2 /mnt/rootfs**: Mounts the root filesystem image to the `/mnt/rootfs` directory. The loop device (`/dev/loop11p2`) is used to access the filesystem image as if it were a physical disk.
   - **cp ~/tech.io/hw2/hello.ko /mnt/rootfs**: Copies the compiled kernel module (`hello.ko`) to the mounted root filesystem, making it available for loading in the QEMU environment.
   - **sudo mkdir /mnt/rootfs/dev /mnt/rootfs/proc /mnt/rootfs/sys**: Creates directories within the root filesystem for device files (`/dev`), process information (`/proc`), and system information (`/sys`). These are essential for the proper functioning of a Linux environment. 
   - **sudo rsync -aH ~/tech.io/busybox-1.33.0/_install/ /mnt/rootfs/**: Synchronizes the BusyBox installation into the root filesystem. BusyBox provides a set of Unix utilities in a single executable, which is useful in embedded systems or minimal environments like the one being set up here.
   - **sudo umount /mnt/rootfs**: Unmounts the root filesystem from the `/mnt/rootfs` directory, finalizing the setup.

### 5. **Running and Testing the Module in QEMU**
This step involves running the QEMU emulator, loading the module, and verifying its behavior.

- **Run U-Boot**:
   ```bash
   cd ~/tech.io
   ./run-u-boot.sh
   ```
   - **cd ~/tech.io**: Changes the current directory to the main project directory.
   - **./run-u-boot.sh**: Executes the script to start U-Boot, a bootloader that initializes the system and loads the Linux kernel. U-Boot will boot the kernel and mount the prepared root filesystem, allowing you to interact with the system through BusyBox.

- **Insert the Kernel Module**:
   ```bash
   insmod hello.ko
   ```
   - **insmod hello.ko**: This command inserts the `hello.ko` module into the running kernel. When the module is loaded, it executes the `hello_init` function, which prints "Hello Qemu!!!" to the kernel's message buffer. This confirms that the module has been successfully loaded.
  **Output**:
  ```
  [  191.600171] hello: loading out-of-tree module taints kernel.
  [  191.615167] Hello Qemu!!!
  ```
- **Remove the Kernel Module**:
   ```bash
   rmmod hello.ko
   ```
   - **rmmod hello.ko**: This command removes the `hello.ko` module from the running kernel. When the module is unloaded, it executes the `hello_exit` function, which prints "Goodbye Qemu!!!" to the kernel's message buffer. This confirms that the module has been successfully removed.
  **Output**:
  ```
  [  448.668906] Goodbye Qemu!!!
  ```
- **View Kernel Messages**:
   ```bash
   dmesg hello.ko
   ```
   - **dmesg**: This command displays the kernel's message buffer, where all kernel log messages are stored. It includes the logs from when the module was inserted and removed, allowing you to verify that the "Hello Qemu!!!" and "Goodbye Qemu!!!" messages were logged correctly.

  **Output**:
  ```
  [    1.677606] debug_vm_pgtable: [debug_vm_pgtable         ]: Validating architecture page table helpers
  [    1.751182] EXT4-fs (vda2): mounted filesystem 25d91024-7609-4e23-bba4-6906b53d2907 with ordered data mode. Quota mode: disabled.
  [    1.757276] VFS: Mounted root (ext4 filesystem) readonly on device 254:2.
  [    1.761354] devtmpfs: mounted
  [    1.785487] Freeing unused kernel image (initmem) memory: 2184K
  [    1.787461] Run /sbin/init as init process
  [    1.788538]   with arguments:
  [    1.789170]     /sbin/init
  [    1.789423]   with environment:
  [    1.789503]     HOME=/
  [    1.789574]     TERM=linux
  [  191.600171] hello: loading out-of-tree module taints kernel.
  [  191.615167] Hello Qemu!!!
  [  448.668906] Goodbye Qemu!!!

  ```
